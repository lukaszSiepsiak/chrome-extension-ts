{"version":3,"file":"background.js","mappings":";;;;;;;AAAA,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,WAAW,CAAC,GAAG,EAAE;IAEtC,OAAO,CAAC,GAAG,CAAC,4CAA4C,CAAC,CAAC;IAE1D,WAAW,CAAC,eAAe,EAAE,IAAI,EAAE,CAAC,OAAe,EAAE,EAAE;QACnD,OAAO,CAAC,GAAG,CAAC,+CAA+C,OAAO,EAAE,CAAC,CAAC;IAC1E,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC;AA0BH,SAAS,WAAW,CAAC,OAAe,EAAE,IAAS,EAAE,QAAqC;IAClF,IAAI,MAAM,CAAC,OAAO,EAAE;QAChB,MAAM,SAAS,GAAG,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;QAE5C,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;KACnD;AACL,CAAC","sources":["webpack://chrome-extension-ts/./src/background.ts"],"sourcesContent":["chrome.runtime.onStartup.addListener(() => {\r\n    // This will run each time Chrome starts\r\n    console.log('chrome.runtime.onStartup => Chrome started');\r\n\r\n    sendMessage('chromeStarted', null, (message: string) => {\r\n        console.log(`Message from extension after chromeStarted: ${message}`);\r\n    });\r\n});\r\n\r\n// chrome.runtime.onConnect.addListener(() => {\r\n//     console.log('chrome.runtime.onConnect => Chrome runtime connected');\r\n\r\n//     sendMessage('chromeConnected', null, (message: string) => {\r\n//         console.log(`Message from extension after chromeConnected: ${message}`);\r\n//     });\r\n// });\r\n\r\n// chrome.runtime.onInstalled.addListener(() => {\r\n//     console.log('chrome.runtime.onInstalled => Invoked when extension is first installed, when the extension is updated to a new version, and when Chrome is updated to a new version');\r\n\r\n//     sendMessage('extensionInstalled', null, (message: string) => {\r\n//         console.log(`Message from extension after extensionInstalled: ${message}`);\r\n//     });\r\n// });\r\n\r\n// chrome.runtime.onUpdateAvailable.addListener((details) => {\r\n//     console.log('chrome.runtime.onUpdateAvailable => Fired when an update is available');\r\n\r\n//     sendMessage('extensionUpdateAvailable', details?.version, (message: string) => {\r\n//         console.log(`Message from extension after extensionUpdateAvailable: ${message}`);\r\n//     });\r\n// });\r\n\r\nfunction sendMessage(message: string, data: any, callback: (responseData: any) => void) {\r\n    if (chrome.runtime) {\r\n        const dataTSend = { action: message, data };\r\n\r\n        chrome.runtime.sendMessage(dataTSend, callback);\r\n    }\r\n}\r\n"],"names":[],"sourceRoot":""}