{"version":3,"file":"contentScript.js","mappings":"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","sources":["webpack://chrome-extension-ts/./src/popup.ts","webpack://chrome-extension-ts/webpack/bootstrap","webpack://chrome-extension-ts/webpack/runtime/compat get default export","webpack://chrome-extension-ts/webpack/runtime/define property getters","webpack://chrome-extension-ts/webpack/runtime/hasOwnProperty shorthand","webpack://chrome-extension-ts/./src/contentScript.ts"],"sourcesContent":["document?.addEventListener('DOMContentLoaded', () => {\r\n    alert('DOMContentLoaded');\r\n    console.log('DOMContentLoaded');\r\n    const manifest = chrome.runtime.getManifest();\r\n\r\n    var extensionName = document.getElementById('extension-name');\r\n    var extensionVersion = document.getElementById('extension-version');\r\n\r\n    if (extensionName != null) {\r\n        extensionName.innerText = manifest.name;\r\n    }\r\n\r\n    if (extensionVersion != null) {\r\n        extensionVersion.innerText = 'Version: ' + manifest.version;\r\n    }\r\n});\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","import './popup';\r\n\r\n// Function to check for updates\r\nasync function checkForUpdate() {\r\n    alert('CHECK FOR UPDATE STARTED');\r\n    console.log('CHECK FOR UPDATE STARTED');\r\n\r\n    const updateUrl = 'https://lukaszsiepsiak.github.io/chrome-extension-ts/update.xml';\r\n\r\n    try {\r\n        alert('FETCH FOR UPDATE STARTED');\r\n        console.log('FETCH FOR UPDATE STARTED');\r\n        const response = await fetch(updateUrl);\r\n        const xmlText = await response.text();\r\n        const parser = new DOMParser();\r\n        const xmlDoc = parser.parseFromString(xmlText, 'application/xml');\r\n\r\n        const appElement = xmlDoc.querySelector('app');\r\n        const updateCheckElement = appElement?.querySelector('updatecheck');\r\n\r\n        if (updateCheckElement) {\r\n            alert('FETCH FOR UPDATE SUCCEEDED');\r\n            const remoteVersion = updateCheckElement.getAttribute('version');\r\n            const codebase = updateCheckElement.getAttribute('codebase');\r\n            alert(`FETCH FOR UPDATE SUCCEEDED. REMOTE VERSION:${remoteVersion} CODEBASE: ${codebase}`);\r\n\r\n            if (remoteVersion && codebase) {\r\n                const currentVersion = chrome.runtime.getManifest().version;\r\n                alert(`FETCH FOR UPDATE SUCCEEDED. CURRENT VERSION:${currentVersion}`);\r\n\r\n                if (compareVersions(currentVersion, remoteVersion) < 0) {\r\n                    alert('NEW VERSIONCHECK FOR UPDATE, NOTIFY USER');\r\n                    console.log('NEW VERSIONCHECK FOR UPDATE, NOTIFY USER');\r\n                    notifyUser(remoteVersion, codebase);\r\n                }\r\n            }\r\n        }\r\n    } catch (error) {\r\n        console.error('Error fetching or parsing update.xml:', error);\r\n    }\r\n}\r\n\r\n// Function to compare versions (returns -1 if v1 < v2, 0 if v1 == v2, 1 if v1 > v2)\r\nfunction compareVersions(v1: string, v2: string): number {\r\n    const v1Parts = v1.split('.').map(Number);\r\n    const v2Parts = v2.split('.').map(Number);\r\n\r\n    for (let i = 0; i < Math.max(v1Parts.length, v2Parts.length); i++) {\r\n        const v1Part = v1Parts[i] || 0;\r\n        const v2Part = v2Parts[i] || 0;\r\n\r\n        if (v1Part < v2Part) return -1;\r\n        if (v1Part > v2Part) return 1;\r\n    }\r\n\r\n    return 0;\r\n}\r\n\r\n// Function to notify the user about the update\r\nfunction notifyUser(version: string, url: string) {\r\n    chrome.notifications.create('updateNotification', {\r\n        type: 'basic',\r\n        iconUrl: '/icons/icon48.png',\r\n        title: 'Extension Update Available',\r\n        message: `A new version (${version}) of the extension is available. Click to update.`,\r\n        priority: 2,\r\n    });\r\n\r\n    chrome.notifications.onClicked.addListener((notificationId) => {\r\n        if (notificationId === 'updateNotification') {\r\n            alert(`NEW VERSIONCHECK FOR UPDATE, updateExtension with url: ${url}`);\r\n            updateExtension(url);\r\n        }\r\n    });\r\n}\r\n\r\nfunction updateExtension(url: string) {\r\n    // chrome.downloads.download({ url, filename: 'chrome-extension-ts.zip' }, (downloadId) => {\r\n    //     alert(`chrome.downloads.download, updateExtension with url: ${url}`);\r\n    //     chrome.downloads.onChanged.addListener(function listener(delta) {\r\n    //         alert(`chrome.downloads.onChanged, updateExtension with url: ${url}`);\r\n    //         if (delta.id === downloadId && delta.state && delta.state.current === 'complete') {\r\n    //             alert(`chrome.runtime.reload, updateExtension with url: ${url}`);\r\n    //             chrome.downloads.onChanged.removeListener(listener);\r\n    //             // After download is complete, reload the extension\r\n    //             chrome.runtime.reload();\r\n    //         }\r\n    //     });\r\n    // });\r\n\r\n    chrome.runtime.reload();\r\n}\r\n\r\n// Check for updates when the extension is installed or updated\r\n// chrome.runtime.onInstalled.addListener((details) => {\r\n//     alert('chrome.runtime.onInstalled');\r\n//     if (details.reason === 'install' || details.reason === 'update') {\r\n//         checkForUpdate();\r\n//     }\r\n// });\r\n\r\n// Optional: Check for updates periodically, e.g., every day\r\nsetInterval(checkForUpdate, 24 * 60 * 60 * 1000); // 24 hours in milliseconds\r\n\r\ndocument?.addEventListener('DOMContentLoaded', () => {\r\n    alert('DOMContentLoaded');\r\n    console.log('DOMContentLoaded');\r\n    const manifest = chrome.runtime.getManifest();\r\n\r\n    var extensionName = document.getElementById('extension-name');\r\n    var extensionVersion = document.getElementById('extension-version');\r\n\r\n    if (extensionName != null) {\r\n        extensionName.innerText = manifest.name;\r\n    }\r\n\r\n    if (extensionVersion != null) {\r\n        extensionVersion.innerText = 'Version: ' + manifest.version;\r\n    }\r\n\r\n    var updateCheckButton = document?.getElementById('extension-check-button');\r\n\r\n    if (updateCheckButton != null) {\r\n        updateCheckButton.addEventListener('click', () => {\r\n            checkForUpdate();\r\n        });\r\n    }\r\n});\r\n"],"names":["document","addEventListener","alert","console","log","manifest","chrome","runtime","getManifest","extensionName","getElementById","extensionVersion","innerText","name","version","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","checkForUpdate","response","fetch","xmlText","text","appElement","DOMParser","parseFromString","querySelector","updateCheckElement","remoteVersion","getAttribute","codebase","currentVersion","v1","v2","v1Parts","split","map","Number","v2Parts","i","Math","max","length","v1Part","v2Part","compareVersions","url","notifications","create","type","iconUrl","title","message","priority","onClicked","addListener","notificationId","reload","error","setInterval","updateCheckButton"],"sourceRoot":""}